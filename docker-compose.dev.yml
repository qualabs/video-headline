version: "2"

services:
  video-hub:
    build: .
    container_name: video-hub
    restart: always
    command: "/start_app_dev.sh plus"
    stdin_open: true
    tty: true
    volumes:
      - ./:/code
    ports:
      - 8010:80
    depends_on:
      - db
      - redis
    environment:
      - DEBUG=True
      - DATABASE_HOST=${DATABASE_HOST}
      - DATABASE_PORT=${DATABASE_PORT}
      - DATABASE_USER=${DATABASE_USER}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - CONN_MAX_AGE=0
      - REDIS_HOST=${REDIS_HOST}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}
      - AWS_MEDIA_CONVERT_ROLE=${AWS_MEDIA_CONVERT_ROLE}
      - AWS_MEDIA_LIVE_ROLE=${AWS_MEDIA_LIVE_ROLE}
      - APM_SERVICE_NAME=${APM_SERVICE_NAME}
      - APM_SECRET_TOKEN=${APM_SECRET_TOKEN}
      - APM_SERVER_URL=${APM_SERVER_URL}
      - APM_DEBUG=True
      - BASE_URL=${BASE_URL}

  web:
    container_name: web
    image: node:10
    working_dir: /code
    command: bash -c "npm install && npm start"
    volumes:
      - ./web/:/code
    depends_on:
      - video-hub
    ports:
      - 3000:3000

  celery:
    build: .
    container_name: celery
    restart: always
    command: "celery -A video_hub worker -l info -Q default"
    stdin_open: true
    tty: true
    volumes:
      - ./:/code
    depends_on:
      - db
      - redis
    environment:
      - DATABASE_HOST=${DATABASE_HOST}
      - DATABASE_PORT=${DATABASE_PORT}
      - DATABASE_USER=${DATABASE_USER}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - REDIS_HOST=${REDIS_HOST}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}
      - TRACKING_API_URL=http://localhost:8020/api/v1/tracking/
      - CONN_MAX_AGE=0

  celery-transcode:
    build: .
    container_name: celery-transcode
    restart: always
    command: "celery -A video_hub worker -l info -Q transcode"
    stdin_open: true
    tty: true
    volumes:
      - ./:/code
    depends_on:
      - db
      - redis
    environment:
      - DATABASE_HOST=${DATABASE_HOST}
      - DATABASE_PORT=${DATABASE_PORT}
      - DATABASE_USER=${DATABASE_USER}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - CONN_MAX_AGE=0
      - REDIS_HOST=${REDIS_HOST}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}

  celery-beat:
    build: .
    container_name: celery-beat
    restart: always
    command: "celery -A video_hub beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler"
    stdin_open: true
    tty: true
    volumes:
      - ./:/code
    depends_on:
      - db
      - redis
    environment:
      - DATABASE_HOST=${DATABASE_HOST}
      - DATABASE_PORT=${DATABASE_PORT}
      - DATABASE_USER=${DATABASE_USER}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - CONN_MAX_AGE=0
      - REDIS_HOST=${REDIS_HOST}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}

  db:
    image: postgres:10.6
    container_name: db
    restart: always
    volumes:
      - pgdata:/var/lib/postgresql/data/
      - ./docker-commands/db_init:/docker-entrypoint-initdb.d/
    environment:
      - DATABASE_USER=${DATABASE_USER}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}

  redis:
    image: redis
    container_name: redis
    restart: always
    volumes:
      - redis-data:/data

volumes:
  pgdata:
  redis-data:
