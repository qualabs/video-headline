# Generated by Django 2.1.5 on 2023-11-22 17:56

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import hub_auth.models
import boto3
import os 
import json 



class Migration(migrations.Migration):

    initial = True
    access_key = os.getenv('AWS_ACCESS_KEY_ID')
    secret_access_key = os.getenv('AWS_SECRET_ACCESS_KEY')
    region = os.environ.get('AWS_DEFAULT_REGION')
    account_id = os.environ.get('AWS_ACCOUNT_ID')
    media_convert_role_arn = os.getenv('AWS_MEDIA_CONVERT_ROLE')
    media_live_role_arn = os.getenv('AWS_MEDIA_LIVE_ROLE')
    media_convert_endpoint_url = None
    if access_key and secret_access_key:
        mediaconvert_client = boto3.client('mediaconvert', region_name=region, aws_access_key_id=access_key, aws_secret_access_key=secret_access_key)
        
        try:
            response = mediaconvert_client.describe_endpoints()
            print("response")
            print(response)
            media_convert_endpoint_url = response['Endpoints'][0]['Url']
        except (IndexError, KeyError):
            print("Unable to retrieve MediaConvert endpoint URL.")
            media_convert_endpoint_url = None
            
    def create_default_objects(apps, schema_editor):
        AWSAccount = apps.get_model('organization', 'AWSAccount')
        access_key, secret_access_key = os.getenv('AWS_ACCESS_KEY_ID'), os.getenv('AWS_SECRET_ACCESS_KEY')

        media_convert_role_arn = os.getenv('AWS_MEDIA_CONVERT_ROLE')
        media_live_role_arn = os.getenv('AWS_MEDIA_LIVE_ROLE')

        media_convert_endpoint_url = Migration.get_media_convert_endpoint_url()

        aws_account_defaults = {
            'name': 'Default AWS Account',
            'access_key': access_key,
            'secret_access_key': secret_access_key,
            'media_live_role': media_live_role_arn,
            'media_convert_role': media_convert_role_arn,
            'region': os.environ.get('AWS_DEFAULT_REGION'),
            'account_id': os.environ.get('AWS_ACCOUNT_ID'),
            # 'media_convert_endpoint_url': media_convert_endpoint_url,
            

            # TODO: Add other fields with default values as needed
        }

        AWSAccount.objects.create(**aws_account_defaults)

        
    def create_default_global_settings(apps, schema_editor):
        configuration = apps.get_model('configuration', 'configuration')
        # load cloudfront configuration from file 
        file_path = os.path.join(os.path.dirname(__file__), 'configuration.samples/cloud_front_configuration.json')
        cloud_front_configuration = {}
        with open(file_path) as json_file:
            cloud_front_configuration = json.load(json_file)
            print(cloud_front_configuration)
            
        cloudfront_config_json = {
            "cloud_front_configuration" : cloud_front_configuration,
        }
            
        configuration.objects.create(**cloudfront_config_json)
        
    def create_default_media_convert_settings(apps, schema_editor):
        media_convert = apps.get_model('configuration', 'MediaConvertConfiguration')
        # load media convert configuration from file 
        file_path = os.path.join(os.path.dirname(__file__), 'configuration.samples/media_convert_configuration.json')
        media_convert_configuration = {}
        with open(file_path) as json_file:
            media_convert_configuration = json.load(json_file)
        
        media_convert_default = {"name" : "Default Media Convert Configuration",
                                 "description" : "Default Media Convert Configuration",
                                "settings" : media_convert_configuration}
        
        return media_convert.objects.create(**media_convert_default).id
        
        
    def create_default_media_live_settings(apps, schema_editor):
        media_live_configuration = apps.get_model('configuration', 'MediaLiveConfiguration')
        # load media live configuration from file 
        file_path_encoder_settings = os.path.join(os.path.dirname(__file__), 'configuration.samples/media_live_encoder_settings.json')
        file_path_source_settings = os.path.join(os.path.dirname(__file__), 'configuration.samples/media_live_input_attachments.json')
        file_path_destination_settings = os.path.join(os.path.dirname(__file__), 'configuration.samples/media_live_destinations.json')
        media_live_encoder_settings_configuration = {}
        media_live_source_settings_configuration = {}
        media_live_destination_settings_configuration = {}
        with open(file_path_encoder_settings) as json_file:
            media_live_encoder_settings_configuration = json.load(json_file)
        with open(file_path_source_settings) as json_file:
            media_live_source_settings_configuration = json.load(json_file)
        with open(file_path_destination_settings) as json_file:
            media_live_destination_settings_configuration = json.load(json_file)
        
        media_live_default = {"name" : "Default Media Live Configuration",
         "description" : "Default Media Live Configuration",
         "source_settings" : media_live_source_settings_configuration,
         "destination_settings" : media_live_destination_settings_configuration,
         "encoder_settings" : media_live_encoder_settings_configuration}
        
        return media_live_configuration.objects.create(**media_live_default).id
        
    def create_plan(apps, schema_editor):
        plan = apps.get_model('organization', 'Plan')
        plan_default = {"name":'Default Plan',
                            "medialive_configuration_id": Migration.create_default_media_live_settings(apps, schema_editor),
                            "video_transcode_configuration_id":Migration.create_default_media_convert_settings(apps, schema_editor)
                        }
                    
        return plan.objects.create( **plan_default).id
        
    def create_organization(apps, schema_editor):
        organization = apps.get_model('organization', 'Organization')
        
        organization_default ={"name":'Default Organization'+ str (os.getenv('AWS_ACCOUNT_ID')),
                               "contact_email":'Default Organization'+ str (os.getenv('AWS_ACCOUNT_ID'))+'@default.com',
                               "bucket_name":'Default Organization'+ str (os.getenv('AWS_ACCOUNT_ID')),
                             
                             "plan_id": Migration.create_plan(apps, schema_editor)}
        organization.objects.create(**organization_default)
            

    def create_periodic_tasks(apps, schema_editor):
        PeriodicTask = apps.get_model('djcelery', 'PeriodicTask')
        PeriodicTask.objects.create(
            name='Delete Channels',
            task='hub.tasks.delete_channels',
            interval=3600,
            enabled=True,
        )
        PeriodicTask.objects.create(
            name='Delete Inputs',
            task='hub.tasks.delete_inputs',
            interval=3600,
            enabled=True,
        )
        PeriodicTask.objects.create(
            name='Check Live Cuts',
            task='hub.tasks.check_live_cuts',
            interval=60,
            enabled=True,
        )
        PeriodicTask.objects.create(
            name='Delete Distributions',
            task='hub.tasks.delete_distributions',
            interval=86400,
            enabled=True,
        )
        PeriodicTask.objects.create(
            name='Bill Renewal',
            task='hub.tasks.bill_renewal',
            interval=2592000,
            enabled=True,
        )
    
        
    
    def get_media_convert_endpoint_url():
        mediaconvert_client = boto3.client('mediaconvert', region_name=os.environ.get('AWS_DEFAULT_REGION'), aws_access_key_id=os.environ.get('AWS_ACCESS_KEY_ID'), aws_secret_access_key=os.environ.get('AWS_SECRET_ACCESS_KEY'))
        
        try:
            response = mediaconvert_client.describe_endpoints()
            print("response")
            print(response)
            endpoint_url = response['Endpoints'][0]['Url']
        except (IndexError, KeyError):
            print("Unable to retrieve MediaConvert endpoint URL.")
            endpoint_url = None

        return endpoint_url

    dependencies = [
        ('organization', '0001_initial'),
        ('auth', '0009_alter_user_last_name_max_length'),
        ('hub_auth', '0001_initial'),
    ]

    operations = [
        # migrations.RunPython(create_default_objects),
        migrations.RunPython(create_default_global_settings),
        migrations.RunPython(create_organization),
    ]
