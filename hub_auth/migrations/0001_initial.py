# Generated by Django 2.1.5 on 2023-10-16 17:32

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import hub_auth.models
import os
import boto3
import json

class Migration(migrations.Migration):
    def create_default_objects(apps, schema_editor):
        AWSAccount = apps.get_model('organization', 'AWSAccount')
        secret_name = 'ApiUserSecret'

        access_key, secret_access_key = Migration.get_secret(secret_name)

        media_convert_role_name = 'MediaConvertRole'
        media_live_role_name = 'MediaLiveAccessRole'

        media_convert_role_arn = Migration.get_iam_role_arn(media_convert_role_name)
        media_live_role_arn = Migration.get_iam_role_arn(media_live_role_name)

        media_convert_endpoint_url = Migration.get_media_convert_endpoint_url()

        aws_account_defaults = {
            'name': 'Default AWS Account',
            'access_key': access_key,
            'secret_access_key': secret_access_key,
            'media_live_role': media_live_role_arn,
            'media_convert_role': media_convert_role_arn,
            'region': os.environ.get('AWS_DEFAULT_REGION'),
            'media_convert_endpoint_url': media_convert_endpoint_url,
            'account_id': os.environ.get('AWS_ACCOUNT_ID'),
            

            # TODO: Add other fields with default values as needed
        }

        AWSAccount.objects.create(**aws_account_defaults)
    def create_periodic_tasks(apps, schema_editor):
        PeriodicTask = apps.get_model('djcelery', 'PeriodicTask')
        PeriodicTask.objects.create(
            name='Delete Channels',
            task='hub.tasks.delete_channels',
            interval=3600,
            enabled=True,
        )
        PeriodicTask.objects.create(
            name='Delete Inputs',
            task='hub.tasks.delete_inputs',
            interval=3600,
            enabled=True,
        )
        PeriodicTask.objects.create(
            name='Check Live Cuts',
            task='hub.tasks.check_live_cuts',
            interval=60,
            enabled=True,
        )
        PeriodicTask.objects.create(
            name='Delete Distributions',
            task='hub.tasks.delete_distributions',
            interval=86400,
            enabled=True,
        )
        PeriodicTask.objects.create(
            name='Bill Renewal',
            task='hub.tasks.bill_renewal',
            interval=2592000,
            enabled=True,
        )


        
            
    def get_iam_role_arn(role_name):
        iam_client = boto3.client('iam')

        try:
            response = iam_client.get_role(RoleName=role_name)
            role_arn = response['Role']['Arn']
        except iam_client.exceptions.NoSuchEntityException:
            print(f"IAM role '{role_name}' not found.")

        return role_arn
        
    def get_secret(secret_name):
        secret_client = boto3.client('secretsmanager')

        try:
            response = secret_client.get_secret_value(SecretId=secret_name)
            secret_data = response['SecretString']
            secret_json = json.loads(secret_data)
            access_key = secret_json.get('accessKeyId')
            secret_access_key = secret_json.get('secretAccessKey')
        except secret_client.exceptions.ResourceNotFoundException:
            print(f"Secret with name '{secret_name}' not found in Secrets Manager.")
            access_key, secret_access_key = None, None

        return access_key, secret_access_key

    def get_media_convert_endpoint_url():
        mediaconvert_client = boto3.client('mediaconvert')
        
        try:
            response = mediaconvert_client.describe_endpoints()
            endpoint_url = response['Endpoints'][0]['Url']
        except (IndexError, KeyError):
            print("Unable to retrieve MediaConvert endpoint URL.")
            endpoint_url = None

        return endpoint_url
#Default configuration

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
        ('organization', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Account',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='APIKey',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=254, verbose_name='Name')),
                ('api_key', models.CharField(default=hub_auth.models.get_key, max_length=100, verbose_name='api key')),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='api_keys', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
        ),
        migrations.CreateModel(
            name='GroupProxy',
            fields=[
            ],
            options={
                'verbose_name': 'Group',
                'verbose_name_plural': 'Groups',
                'proxy': True,
                'indexes': [],
            },
            bases=('auth.group',),
            managers=[
                ('objects', django.contrib.auth.models.GroupManager()),
            ],
        ),
        migrations.AddField(
            model_name='account',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='account',
            name='organization',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='users', to='organization.Organization', verbose_name='Organization'),
        ),
        migrations.AddField(
            model_name='account',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.RunPython(create_default_objects),
       
    ]
    
